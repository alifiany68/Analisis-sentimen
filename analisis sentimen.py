# -*- coding: utf-8 -*-
"""analisis sentimen.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Q8j2R3Kil6PCVN_KBTmb0Z98V1FLTH3x
"""

pip install pandas numpy matplotlib seaborn scikit-learn sastrawi transformers torch tqdm

from google.colab import files

uploaded = files.upload()  # Akan muncul tombol untuk memilih file dari komputer Anda

import pandas as pd
import re


df = pd.read_csv('kaburajadulu_BARU.csv')

pattern = r'(kabur\s*aja\s*dulu|#kaburajadulu|#kaburaja|#kabur_aja_dulu|#kabur_aja|kaburajadulu)'
df = df[df['full_text'].str.contains(pattern, case=False, na=False)]
df = df.drop_duplicates(subset=['full_text']).reset_index(drop=True)
df['clean_text'] = df['full_text'].astype(str).apply(lambda x: re.sub(r'\s+', ' ', x).strip())
print(df[['full_text', 'clean_text']].head(10))

df.to_csv('kaburajadulu_dataset_clean.csv', index=False)

import pandas as pd
import re

df = pd.read_csv('kaburajadulu_dataset_clean_2.csv')

# Kamus kata positif/negatif sederhana
positif = ['bahagia','senang','sukses','nyaman','lega','aman','hebat','menang','berhasil','bagus','baik','cinta','lucu','gemes','sehat','indah','keren','support','percaya','semangat','beruntung','selamat']
negatif = ['sedih','marah','gagal','takut','buruk','jelek','parah','susah','capek','lelah','macet','kritik','protes','benci','kecewa','kurang','tidak','nggak','enggak','sulit','masalah','ancam','kabur']

# Pola/kata kunci sarkasme (bisa dikembangkan)
sarkasme_patterns = [
    r'wkwk+', r'haha+', r'wakak+', r'anjir', r'astaga', r'parah', r'kocak', r'gila', r'lebay', r'konyol',
    r'sarkasme', r'sarkastik', r'ironis', r'yaelah', r'cuma', r'banget', r'sumpah', r'beneran', r'males',
    r'ga penting', r'gak penting', r'kacau', r'parah banget', r'kocak banget', r'cape deh', r'cape banget'
]

def detect_sarkasme(text):
    text = text.lower()
    for pattern in sarkasme_patterns:
        if re.search(pattern, text):
            return True
    return False

def label_sentiment(text):
    text = text.lower()
    score = 0
    for w in positif:
        if w in text:
            score += 1
    for w in negatif:
        if w in text:
            score -= 1
    if detect_sarkasme(text):
        return 0  # Negatif jika sarkasme
    if score > 0:
        return 2  # Positif
    elif score < 0:
        return 0  # Negatif
    else:
        return 1  # Netral

df['auto_label'] = df['clean_text'].apply(label_sentiment)
label_map = {0: 'Negatif', 1: 'Netral', 2: 'Positif'}
df['auto_label_str'] = df['auto_label'].map(label_map)

print(df[['clean_text', 'auto_label_str']].sample(10))

df.to_csv('kaburajadulu_label.csv', index=False)

import pandas as pd

df = pd.read_csv('kaburajadulu_label.csv')

from sklearn.feature_extraction.text import TfidfVectorizer

tfidf = TfidfVectorizer(max_features=3000)
X = tfidf.fit_transform(df['clean_text'].astype(str))


y = df['auto_label']

# 1. Split Data: Training dan Testing
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(
    X, y, test_size=0.2, random_state=42, stratify=y
)

# 2. Pelatihan Model (Logistic Regression)
from sklearn.linear_model import LogisticRegression

clf = LogisticRegression(max_iter=1000, random_state=42)
clf.fit(X_train, y_train)

# 3. Prediksi pada Data Uji
y_pred = clf.predict(X_test)

from sklearn.metrics import classification_report, confusion_matrix
import matplotlib.pyplot as plt
import seaborn as sns

# Evaluasi performa model
print(classification_report(y_test, y_pred, target_names=['Negatif', 'Netral', 'Positif']))


# distribusi sentimen
sentimen_counts = df[label_col].value_counts().sort_index()

# label untuk pie chart
labels = ['Negatif', 'Netral', 'Positif']

# Visualisasi Pie Chart
colors = ['#8B0000', '#D3D3D3', '#006400']

plt.figure(figsize=(7,7))
plt.pie(sentimen_counts, labels=labels, autopct='%1.1f%%', startangle=140, colors=colors, explode=(0.03,0.03,0.03), shadow=True)
plt.title('Distribusi Sentimen #KaburAjaDulu')
plt.axis('equal')
plt.show()
